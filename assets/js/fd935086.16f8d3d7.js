"use strict";(self.webpackChunkdoc_oibus=self.webpackChunkdoc_oibus||[]).push([[2130],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=u(n),m=i,f=p["".concat(l,".").concat(m)]||p[m]||c[m]||a;return n?r.createElement(f,o(o({ref:t},d),{},{components:n})):r.createElement(f,o({ref:t},d))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:i,o[1]=s;for(var u=2;u<a;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5640:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var r=n(7462),i=(n(7294),n(3905));const a={sidebar_position:4},o="Modbus",s={unversionedId:"guide/south-connectors/modbus",id:"guide/south-connectors/modbus",title:"Modbus",description:"Modbus is a communication protocol utilized in PLC networks. Originally, it was developed for serial interfaces like",source:"@site/docs/guide/south-connectors/modbus.md",sourceDirName:"guide/south-connectors",slug:"/guide/south-connectors/modbus",permalink:"/docs/guide/south-connectors/modbus",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"guideSidebar",previous:{title:"Microsoft SQL Server (MSSQL)",permalink:"/docs/guide/south-connectors/mssql"},next:{title:"SQLite",permalink:"/docs/guide/south-connectors/sqlite"}},l={},u=[{value:"Specific settings",id:"specific-settings",level:2},{value:"Item settings",id:"item-settings",level:2},{value:"About the Modbus address",id:"about-the-modbus-address",level:3}],d={toc:u},p="wrapper";function c(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"modbus"},"Modbus"),(0,i.kt)("p",null,"Modbus is a communication protocol utilized in PLC networks. Originally, it was developed for serial interfaces like\nRS232, RS422, and RS485, and later expanded to include support for TCP mode. "),(0,i.kt)("p",null,"OIBus uses the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Cloud-Automation/node-modbus"},"jsmodbus")," library ",(0,i.kt)("strong",{parentName:"p"},"in TCP mode only"),"."),(0,i.kt)("h2",{id:"specific-settings"},"Specific settings"),(0,i.kt)("p",null,"Here are the Modbus connector settings:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Host"),": IP address or hostname of the Modbus server machine."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Port"),": The port to use for connection (502 by default)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Retry interval"),": Time to wait between reconnections after a connection failure."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Slave ID"),": Identifies the Modbus source machine, default is 1."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Address Offset"),": For most PLCs, there is no offset (Modbus option). Some PLCs may start the address range at 1 instead of 0 (JBus option)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Endianness"),": Specifies the type of bit encoding (Big Endian or Little Endian)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Swap Bytes"),": Determines whether the bytes within a group of 16 bits (a word) should be inverted or not."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Swap Words"),": Indicates whether the words (16-bit groups) should be inverted or not within a 32-bit group.")),(0,i.kt)("h2",{id:"item-settings"},"Item settings"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Address"),": The hexadecimal address of the data within the device."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Modbus type"),": Specifies whether it's a ",(0,i.kt)("em",{parentName:"li"},"coil"),", ",(0,i.kt)("em",{parentName:"li"},"discrete input"),", ",(0,i.kt)("em",{parentName:"li"},"input register"),", or ",(0,i.kt)("em",{parentName:"li"},"holding register")," (default)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Data type"),": Relevant for ",(0,i.kt)("em",{parentName:"li"},"holding registers")," or ",(0,i.kt)("em",{parentName:"li"},"input registers"),". It defines the type of data fetched from the\nregister, with options such as UInt16 (default), Int16, UInt32, Int32, UInt64, Int64, Float, or Double."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Multiplier Coefficient"),": Multiplies the retrieved value (default is 1).")),(0,i.kt)("h3",{id:"about-the-modbus-address"},"About the Modbus address"),(0,i.kt)("p",null,"The address should match the variable's address in the PLC, represented in hexadecimal without the data type digit. For\ninstance:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"For ",(0,i.kt)("em",{parentName:"li"},"holding register")," data at 0x40001, input the address as ",(0,i.kt)("strong",{parentName:"li"},"0x0001")," (excluding the digit ",(0,i.kt)("inlineCode",{parentName:"li"},"4"),") and specify the\nModbus type as ",(0,i.kt)("em",{parentName:"li"},"holdingRegister"),"."),(0,i.kt)("li",{parentName:"ul"},"For ",(0,i.kt)("em",{parentName:"li"},"coil")," data at 0x009C, use ",(0,i.kt)("strong",{parentName:"li"},"0x009C")," as the address and specify the Modbus type as ",(0,i.kt)("em",{parentName:"li"},"coil"),".")),(0,i.kt)("p",null,"Modbus data addresses are structured according to the ",(0,i.kt)("a",{parentName:"p",href:"https://www.modbus.org/docs/PI_MBUS_300.pdf"},"Modicon Convention Notation (MCN)"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Coil: ",(0,i.kt)("inlineCode",{parentName:"li"},"[0x00001 - 0x09999]")," (1 to 39,321)"),(0,i.kt)("li",{parentName:"ul"},"Discrete Input: ",(0,i.kt)("inlineCode",{parentName:"li"},"[0x10001 - 0x19999]")," (65,537 to 104,857)"),(0,i.kt)("li",{parentName:"ul"},"Input Register: ",(0,i.kt)("inlineCode",{parentName:"li"},"[0x30001 - 0x39999]")," (196,609 to 235,929)"),(0,i.kt)("li",{parentName:"ul"},"Holding Register: ",(0,i.kt)("inlineCode",{parentName:"li"},"[0x40001 - 0x49999]")," (262,145 to 301,465)")),(0,i.kt)("p",null,"An extended version of MCN allows for larger address spaces:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Coil: ",(0,i.kt)("inlineCode",{parentName:"li"},"[0x000001 - 0x065535]")),(0,i.kt)("li",{parentName:"ul"},"Discrete Input: ",(0,i.kt)("inlineCode",{parentName:"li"},"[0x100001 - 0x165535]")),(0,i.kt)("li",{parentName:"ul"},"Input Register: ",(0,i.kt)("inlineCode",{parentName:"li"},"[0x300001 - 0x365535]")),(0,i.kt)("li",{parentName:"ul"},"Holding Register: ",(0,i.kt)("inlineCode",{parentName:"li"},"[0x400001 - 0x465535]"))))}c.isMDXComponent=!0}}]);